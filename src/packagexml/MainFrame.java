package packagexml;

import com.opencsv.CSVParser;
import com.opencsv.CSVParserBuilder;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Manoj
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Package.xml File path:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 40, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("CSV File Path:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, 310, -1));
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 310, -1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_search_16px.png"))); // NOI18N
        jButton1.setText("Choose");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, -1, -1));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_search_16px.png"))); // NOI18N
        jButton2.setText("Choose");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 80, -1, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, 520, 200));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Output:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Output File Path:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, -1, -1));
        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, 310, -1));

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_search_16px.png"))); // NOI18N
        jButton3.setText("Choose");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 120, -1, -1));

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_parse_from_clipboard_16px.png"))); // NOI18N
        jButton4.setText("Parse");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8_close_window_48px.png"))); // NOI18N
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 0, 50, 40));

        jLabel6.setText("Created By:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 440, -1, -1));

        jLabel7.setText("Manoj S. Kapile");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 470, -1, -1));

        jLabel8.setText("Shailesh S. Kodulkar");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 460, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 683, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Package.xml", "xml", "XML");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextField1.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV File", "csv", "CSV");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextField2.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Package.xml", "xml", "XML");
        fileChooser.setFileFilter(filter);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            jTextField3.setText(file.getAbsolutePath() + ".xml");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        MainFrame frame=new MainFrame();
        if (!(jTextField1.getText().trim().equals("") || jTextField2.getText().trim().equals("") || jTextField3.getText().trim().equals(""))) {
            try {
                FileReader filereader = new FileReader(frame.createTempCSV(jTextField2.getText().trim(),jTextField3.getText().trim()));
                //FileReader filereader = new FileReader(jTextField2.getText().trim());
                CSVParser parser = new CSVParserBuilder().withSeparator(',').build();
                CSVReader csvReader = new CSVReaderBuilder(filereader)
                        .withCSVParser(parser)
                        .build();

                List<String[]> allData = csvReader.readAll();
                String name = null;

                Map<String, List<String>> typenameMembers = new HashMap<String, List<String>>();
                for (String[] row : allData) {
                    for (Integer i = 0; i < row.length; i++) {
                        if (i == 0) {
                            name = row[i].trim();
                            typenameMembers.put(row[i], new ArrayList<String>());
                        } else {
                            typenameMembers.get(name).add(row[i].trim());

                        }
                    }

                }

                //System.out.println(typenameMembers);

                File inputFile = new File(jTextField1.getText());
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(inputFile);
                Document outputDoc = dBuilder.newDocument();
                doc.getDocumentElement().normalize();

                NodeList nList = doc.getElementsByTagName("types");

                Element rootElement = outputDoc.createElement("Package");
                outputDoc.appendChild(rootElement);

                Attr attr = outputDoc.createAttribute("xmlns");
                attr.setValue("http://soap.sforce.com/2006/04/metadata");
                rootElement.setAttributeNode(attr);

                for (Integer i = 0; i < nList.getLength(); i++) {
                    Node nNode = nList.item(i);
                    System.out.println(nNode.getNodeName());

                    if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element eElement = (Element) nNode;
                        NodeList memberNodeList = eElement.getElementsByTagName("members");
                        Element nameElement = (Element) eElement.getElementsByTagName("name").item(0);
                        String typeName = nameElement.getTextContent();
                        System.out.println("Name:" + typeName);

                        Element types = outputDoc.createElement("types");
                        rootElement.appendChild(types);

                        for (Integer j = 0; j < memberNodeList.getLength(); j++) {
                            Node node1 = memberNodeList.item(j);

                            if (node1.getNodeType() == node1.ELEMENT_NODE) {
                                Element member = (Element) node1;
                                String memberValue = member.getTextContent();
                                System.out.println(member.getTextContent());

                                if (typenameMembers.containsKey(typeName) && typenameMembers.get(typeName).contains(memberValue)) {
                                    continue;
                                } else {
                                    Element memberNode = outputDoc.createElement("members");
                                    memberNode.appendChild(outputDoc.createTextNode(memberValue));
                                    types.appendChild(memberNode);
                                }

                            }
                        }

                        Element nameNode = outputDoc.createElement("name");
                        nameNode.appendChild(outputDoc.createTextNode(typeName));
                        types.appendChild(nameNode);
                    }

                }

                Element versionElement = (Element) doc.getElementsByTagName("version").item(0);
                String versionNumber = versionElement.getTextContent();
                //System.out.println(versionNumber);

                Element version = outputDoc.createElement("version");
                version.appendChild(outputDoc.createTextNode(versionNumber));
                rootElement.appendChild(version);

                TransformerFactory transformerFactory = TransformerFactory.newInstance();
                Transformer transformer = transformerFactory.newTransformer();
                transformer.setOutputProperty(OutputKeys.METHOD, "xml");
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                DOMSource source = new DOMSource(outputDoc);

                StreamResult result = new StreamResult(new File(jTextField3.getText()));
                transformer.transform(source, result);

                // Output to console for testing
                StreamResult consoleResult = new StreamResult(System.out);
                transformer.transform(source, consoleResult);

                JOptionPane.showMessageDialog(this, "File Parsed successfully. OutputFile:" + jTextField3.getText());
                jTextArea1.read(new FileReader(jTextField3.getText().trim()), null);

            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                jTextArea1.setText(ex.getMessage() + "\n" + ex.getStackTrace());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                jTextArea1.setText(ex.getMessage() + "\n" + ex.getStackTrace());
            } catch (ParserConfigurationException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                jTextArea1.setText(ex.getMessage() + "\n" + ex.getStackTrace());
            } catch (SAXException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                jTextArea1.setText(ex.getMessage() + "\n" + ex.getStackTrace());
            } catch (TransformerConfigurationException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                jTextArea1.setText(ex.getMessage() + "\n" + ex.getStackTrace());
            } catch (TransformerException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                jTextArea1.setText(ex.getMessage() + "\n" + ex.getStackTrace());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select input package.xml, csv and output package.xml files.");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel5MouseClicked

    public File createTempCSV(String inputFilePath,String outputFilePath) {
        Map<String, String> formatMap = new HashMap<String, String>();
        formatMap.put("classes", "ApexClass");
//ApexComponent
        formatMap.put("pages", "ApexPage");
        formatMap.put("triggers", "ApexTrigger");
        formatMap.put("approvalProcesses", "ApprovalProcess");
//AssignmentRule
//AuraDefinitionBundle
//Bot
//Certificate
//CleanDataService
//Community
//CompactLayout
//ConnectedApp
//CorsWhitelistOrigin
//CustomApplication
//CustomField
//CustomLabel
//CustomMetadata
        formatMap.put("objects", "CustomObject");
//CustomSite
//CustomTab
//DelegateGroup
        formatMap.put("Documents", "Document");
//DuplicateRule
//EmailServicesFunction
        formatMap.put("EmailTemplates", "EmailTemplate");
//EmbeddedServiceBranding
//EmbeddedServiceConfig
//EmbeddedServiceLiveAgent
//FieldSet
//FlexiPage
//Flow
//FlowDefinition
        formatMap.put("globalValueSets", "GlobalValueSet");
        formatMap.put("groups", "Group");
//HomePageLayout
//KeywordList
        formatMap.put("layouts", "Layout");
//Letterhead
//ListView
//LiveChatButton
//LiveChatDeployment
//ManagedTopics
//MatchingRule
//MlDomain
//ModerationRule
//NamedCredential
//Network
//NetworkBranding
//PermissionSet
//Portal
//PresenceUserConfig
        formatMap.put("profiles", "Profile");
//ProfilePasswordPolicy
//ProfileSessionSetting
        formatMap.put("queues", "Queue");
//QueueRoutingConfig
//QuickAction
//RecordType
//RemoteSiteSetting
//Report
//ReportType
        formatMap.put("roles", "Role");
//SamlSsoConfig
//ServiceChannel
//ServicePresenceStatus
//SharingCriteriaRule
//SharingOwnerRule
//SharingReason
        formatMap.put("sharingRules", "SharingRules");
//SiteDotCom
//Skill
        formatMap.put("staticresources", "StaticResource");
//TopicsForObjects
//Translations
//UserCriteria
//ValidationRule
//WebLink
        formatMap.put("workflows", "Workflow");
//WorkflowAlert
//WorkflowFieldUpdate
//WorkflowOutboundMessage
//WorkflowRule
//WorkflowTask

        Map<String, List<String>> csvMap = new HashMap<String, List<String>>();
        File outputCSV = new File(outputFilePath);
        try {
            FileWriter csvWriter = new FileWriter(outputCSV);
            FileReader filereader;
            filereader = new FileReader(inputFilePath);
            CSVParser parser = new CSVParserBuilder().withSeparator(',').build();
            CSVReader csvReader = new CSVReaderBuilder(filereader)
                    .withCSVParser(parser)
                    .build();

            List<String[]> allData = csvReader.readAll();
            int rowNumber = 0;

            for (String[] row : allData) {
                System.out.println(rowNumber++);
                String typeName = "";
                String memberName = "";
                if (row.length == 2) {
                    typeName = row[1];
                    memberName = row[0];
                }
                //System.out.println(typeName);
                //System.out.println("MemberName:" + memberName);

                if (!csvMap.containsKey(formatMap.get(typeName))) {
                    csvMap.put(formatMap.get(typeName), new ArrayList<String>());
                }
                if (typeName.equalsIgnoreCase("classes") || typeName.equalsIgnoreCase("profiles") || typeName.equalsIgnoreCase("pages") || typeName.equalsIgnoreCase("triggers") || typeName.equalsIgnoreCase("approvalProcesses")) {
                    csvMap.get(formatMap.get(typeName)).add(memberName.substring(0, memberName.lastIndexOf(".")));

                }
            }

            System.out.println(csvMap);

            for (String key : csvMap.keySet()) {
                String rowData = key + ",";

                rowData += String.join(",", csvMap.get(key));
                csvWriter.write(rowData);
                csvWriter.write("\n");

                //System.out.println(rowData);

            }
            csvWriter.flush();
            csvWriter.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

        return outputCSV;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
